// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger loan application aggregator service - OpenAPI 3.0
 *
 * This is a sample some LoanApplication aggregator
 *
 * API version: 1.0.0
 */

package main

import (
	"context"
	"github.com/donskova1ex/application_aggregator/config"
	"github.com/donskova1ex/application_aggregator/internal/processors"
	"github.com/donskova1ex/application_aggregator/internal/repositories"
	"log"

	//"context"
	//"github.com/donskova1ex/application_aggregator/config"
	//"github.com/donskova1ex/application_aggregator/internal/repositories"
	openapi "github.com/donskova1ex/application_aggregator/openapi"
	"log/slog"
	"net/http"
	"os"
)

func main() {

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	logHandler := slog.NewJSONHandler(os.Stdout, nil)
	logger := slog.New(logHandler)
	slog.SetDefault(logger)

	logger.Info("Server started")

	logger.Info("API configuration initialization has started")
	cfg, err := config.NewConfig()
	if err != nil {
		logger.Error("failed to load configuration", slog.String("error", err.Error()))
		os.Exit(1)
	}
	logger.Info("Configuration has been initialized")

	logger.Info("DB initialization has started")
	db, err := repositories.NewPostgresDB(ctx, cfg.DB)
	if err != nil {
		logger.Error("failed to initialize DB", slog.String("error", err.Error()))
	}
	logger.Info("DB has been initialized")

	repository := repositories.NewPostgresRepository(db, logger)

	ConfigAPIService := openapi.NewConfigAPIService()
	ConfigAPIController := openapi.NewConfigAPIController(ConfigAPIService)

	LoanApplicationsAPIService := openapi.NewLoanApplicationsAPIService()
	LoanApplicationsAPIController := openapi.NewLoanApplicationsAPIController(LoanApplicationsAPIService)

	organizationProcessor := processors.NewOrganization(repository, logger)
	OrganizationsAPIService := openapi.NewOrganizationsAPIService(organizationProcessor, logger)
	OrganizationsAPIController := openapi.NewOrganizationsAPIController(OrganizationsAPIService)

	router := openapi.NewRouter(ConfigAPIController, LoanApplicationsAPIController, OrganizationsAPIController)

	//if err := http.ListenAndServe(":8080", router); err != nil {
	//	logger.Error("failed to start server", slog.String("error", err.Error()))
	//}

	log.Fatal(http.ListenAndServe(":8080", router))
}
