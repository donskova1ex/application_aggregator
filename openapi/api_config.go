// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger loan application aggregator service - OpenAPI 3.0
 *
 * This is a sample some LoanApplication aggregator
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ConfigAPIController binds http requests to an api service and writes the service results to the http response
type ConfigAPIController struct {
	service      ConfigAPIServicer
	errorHandler ErrorHandler
}

// ConfigAPIOption for how the controller is set up.
type ConfigAPIOption func(*ConfigAPIController)

// WithConfigAPIErrorHandler inject ErrorHandler into controller
func WithConfigAPIErrorHandler(h ErrorHandler) ConfigAPIOption {
	return func(c *ConfigAPIController) {
		c.errorHandler = h
	}
}

// NewConfigAPIController creates a default api controller
func NewConfigAPIController(s ConfigAPIServicer, opts ...ConfigAPIOption) *ConfigAPIController {
	controller := &ConfigAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConfigAPIController
func (c *ConfigAPIController) Routes() Routes {
	return Routes{
		"GetConfigs": Route{
			strings.ToUpper("Get"),
			"/api/v1/configs",
			c.GetConfigs,
		},
		"CreateOrganization": Route{
			strings.ToUpper("Post"),
			"/api/v1/configs",
			c.CreateOrganization,
		},
		"GetConfigByUUID": Route{
			strings.ToUpper("Get"),
			"/api/v1/configs/{uuid}",
			c.GetConfigByUUID,
		},
		"DeleteConfigByUUID": Route{
			strings.ToUpper("Delete"),
			"/api/v1/configs/{uuid}",
			c.DeleteConfigByUUID,
		},
		"EditConfigByUUID": Route{
			strings.ToUpper("Patch"),
			"/api/v1/configs/{uuid}",
			c.EditConfigByUUID,
		},
		"GetConfigByOrganizationUUID": Route{
			strings.ToUpper("Get"),
			"/api/v1/configs/organizations/{uuid}",
			c.GetConfigByOrganizationUUID,
		},
		"DeleteConfigByOrganizationUUID": Route{
			strings.ToUpper("Delete"),
			"/api/v1/configs/organizations/{uuid}",
			c.DeleteConfigByOrganizationUUID,
		},
		"EditConfigByOrganizationUUID": Route{
			strings.ToUpper("Patch"),
			"/api/v1/configs/organizations/{uuid}",
			c.EditConfigByOrganizationUUID,
		},
	}
}

// GetConfigs - get configs
func (c *ConfigAPIController) GetConfigs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetConfigs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateOrganization - create new config
func (c *ConfigAPIController) CreateOrganization(w http.ResponseWriter, r *http.Request) {
	var configParam Config
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigRequired(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfigConstraints(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateOrganization(r.Context(), configParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetConfigByUUID - get config data
func (c *ConfigAPIController) GetConfigByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetConfigByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteConfigByUUID - Delete config data
func (c *ConfigAPIController) DeleteConfigByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteConfigByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditConfigByUUID - update config information
func (c *ConfigAPIController) EditConfigByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	var configParam Config
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigRequired(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfigConstraints(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditConfigByUUID(r.Context(), uuidParam, configParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetConfigByOrganizationUUID - get organization's config data
func (c *ConfigAPIController) GetConfigByOrganizationUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetConfigByOrganizationUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteConfigByOrganizationUUID - Delete organization's config data
func (c *ConfigAPIController) DeleteConfigByOrganizationUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteConfigByOrganizationUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditConfigByOrganizationUUID - update organization's config information
func (c *ConfigAPIController) EditConfigByOrganizationUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	var configParam Config
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigRequired(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfigConstraints(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditConfigByOrganizationUUID(r.Context(), uuidParam, configParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
