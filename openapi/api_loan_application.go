// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger loan application aggregator service - OpenAPI 3.0
 *
 * This is a sample some LoanApplication aggregator
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// LoanApplicationAPIController binds http requests to an api service and writes the service results to the http response
type LoanApplicationAPIController struct {
	service      LoanApplicationAPIServicer
	errorHandler ErrorHandler
}

// LoanApplicationAPIOption for how the controller is set up.
type LoanApplicationAPIOption func(*LoanApplicationAPIController)

// WithLoanApplicationAPIErrorHandler inject ErrorHandler into controller
func WithLoanApplicationAPIErrorHandler(h ErrorHandler) LoanApplicationAPIOption {
	return func(c *LoanApplicationAPIController) {
		c.errorHandler = h
	}
}

// NewLoanApplicationAPIController creates a default api controller
func NewLoanApplicationAPIController(s LoanApplicationAPIServicer, opts ...LoanApplicationAPIOption) *LoanApplicationAPIController {
	controller := &LoanApplicationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LoanApplicationAPIController
func (c *LoanApplicationAPIController) Routes() Routes {
	return Routes{
		"LoanApplication": Route{
			strings.ToUpper("Post"),
			"/api/v1/loan_application",
			c.LoanApplication,
		},
	}
}

// LoanApplication - post client loan application from site
func (c *LoanApplicationAPIController) LoanApplication(w http.ResponseWriter, r *http.Request) {
	var loanApplicationParam LoanApplication
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loanApplicationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoanApplicationRequired(loanApplicationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoanApplicationConstraints(loanApplicationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.LoanApplication(r.Context(), loanApplicationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
