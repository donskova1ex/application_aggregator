// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger loan application aggregator service - OpenAPI 3.0
 *
 * This is a sample some LoanApplication aggregator
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LoanApplicationsAPIController binds http requests to an api service and writes the service results to the http response
type LoanApplicationsAPIController struct {
	service      LoanApplicationsAPIServicer
	errorHandler ErrorHandler
}

// LoanApplicationsAPIOption for how the controller is set up.
type LoanApplicationsAPIOption func(*LoanApplicationsAPIController)

// WithLoanApplicationsAPIErrorHandler inject ErrorHandler into controller
func WithLoanApplicationsAPIErrorHandler(h ErrorHandler) LoanApplicationsAPIOption {
	return func(c *LoanApplicationsAPIController) {
		c.errorHandler = h
	}
}

// NewLoanApplicationsAPIController creates a default api controller
func NewLoanApplicationsAPIController(s LoanApplicationsAPIServicer, opts ...LoanApplicationsAPIOption) *LoanApplicationsAPIController {
	controller := &LoanApplicationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LoanApplicationsAPIController
func (c *LoanApplicationsAPIController) Routes() Routes {
	return Routes{
		"LoanApplications": Route{
			strings.ToUpper("Get"),
			"/api/v1/loan_applications",
			c.LoanApplications,
		},
		"CreateLoanApplication": Route{
			strings.ToUpper("Post"),
			"/api/v1/loan_applications",
			c.CreateLoanApplication,
		},
		"GetLoanApplicationById": Route{
			strings.ToUpper("Get"),
			"/api/v1/loan_applications/{id}",
			c.GetLoanApplicationById,
		},
		"DeleteLoanApplicationById": Route{
			strings.ToUpper("Delete"),
			"/api/v1/loan_applications/{id}",
			c.DeleteLoanApplicationById,
		},
		"EditLoanApplicaitionById": Route{
			strings.ToUpper("Patch"),
			"/api/v1/loan_applications/{id}",
			c.EditLoanApplicaitionById,
		},
	}
}

// LoanApplications - get all loan applications
func (c *LoanApplicationsAPIController) LoanApplications(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LoanApplications(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateLoanApplication - create client loan application from site
func (c *LoanApplicationsAPIController) CreateLoanApplication(w http.ResponseWriter, r *http.Request) {
	var loanApplicationParam LoanApplication
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loanApplicationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoanApplicationRequired(loanApplicationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoanApplicationConstraints(loanApplicationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateLoanApplication(r.Context(), loanApplicationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLoanApplicationById - get loan application's data
func (c *LoanApplicationsAPIController) GetLoanApplicationById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	result, err := c.service.GetLoanApplicationById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteLoanApplicationById - delete loan application
func (c *LoanApplicationsAPIController) DeleteLoanApplicationById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	result, err := c.service.DeleteLoanApplicationById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditLoanApplicaitionById - update loan application information
func (c *LoanApplicationsAPIController) EditLoanApplicaitionById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	var loanApplicationParam LoanApplication
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loanApplicationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoanApplicationRequired(loanApplicationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoanApplicationConstraints(loanApplicationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditLoanApplicaitionById(r.Context(), idParam, loanApplicationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
