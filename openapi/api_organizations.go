// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger loan application aggregator service - OpenAPI 3.0
 *
 * This is a sample some LoanApplication aggregator
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OrganizationsAPIController binds http requests to an api service and writes the service results to the http response
type OrganizationsAPIController struct {
	service      OrganizationsAPIServicer
	errorHandler ErrorHandler
}

// OrganizationsAPIOption for how the controller is set up.
type OrganizationsAPIOption func(*OrganizationsAPIController)

// WithOrganizationsAPIErrorHandler inject ErrorHandler into controller
func WithOrganizationsAPIErrorHandler(h ErrorHandler) OrganizationsAPIOption {
	return func(c *OrganizationsAPIController) {
		c.errorHandler = h
	}
}

// NewOrganizationsAPIController creates a default api controller
func NewOrganizationsAPIController(s OrganizationsAPIServicer, opts ...OrganizationsAPIOption) *OrganizationsAPIController {
	controller := &OrganizationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OrganizationsAPIController
func (c *OrganizationsAPIController) Routes() Routes {
	return Routes{
		"Organizations": Route{
			strings.ToUpper("Get"),
			"/api/v1/organizations",
			c.Organizations,
		},
		"CreateOrganizationByUUID": Route{
			strings.ToUpper("Post"),
			"/api/v1/organizations",
			c.CreateOrganizationByUUID,
		},
		"GetOrganizationByUUID": Route{
			strings.ToUpper("Get"),
			"/api/v1/organizations/{uuid}",
			c.GetOrganizationByUUID,
		},
		"DeleteOrganizationByUUID": Route{
			strings.ToUpper("Delete"),
			"/api/v1/organizations/{uuid}",
			c.DeleteOrganizationByUUID,
		},
		"EditOrganizationByUUID": Route{
			strings.ToUpper("Patch"),
			"/api/v1/organizations/{uuid}",
			c.EditOrganizationByUUID,
		},
	}
}

// Organizations - get all organizations
func (c *OrganizationsAPIController) Organizations(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Organizations(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateOrganizationByUUID - create new organization
func (c *OrganizationsAPIController) CreateOrganizationByUUID(w http.ResponseWriter, r *http.Request) {
	var organizationParam Organization
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&organizationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrganizationRequired(organizationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrganizationConstraints(organizationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateOrganizationByUUID(r.Context(), organizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrganizationByUUID - get organization data
func (c *OrganizationsAPIController) GetOrganizationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetOrganizationByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOrganizationByUUID - delete organization
func (c *OrganizationsAPIController) DeleteOrganizationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteOrganizationByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditOrganizationByUUID - update organization information
func (c *OrganizationsAPIController) EditOrganizationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	var organizationParam Organization
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&organizationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrganizationRequired(organizationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrganizationConstraints(organizationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditOrganizationByUUID(r.Context(), uuidParam, organizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
