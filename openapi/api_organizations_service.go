// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger loan application aggregator service - OpenAPI 3.0
 *
 * This is a sample some LoanApplication aggregator
 *
 * API version: 1.0.0
 */

package openapi

import (
	"context"
	"database/sql"
	"github.com/donskova1ex/application_aggregator/internal"
	"github.com/donskova1ex/application_aggregator/internal/domain"
	"log/slog"
	"net/http"
	"errors"
)
var JsonError *APIError

type OrganizationsProcessor interface {
	CreateOrganization(ctx context.Context, organization *domain.Organization) (*domain.Organization, error)
	GetOrganizationByUUID(ctx context.Context, uuid string) (*domain.Organization, error)
	DeleteOrganizationByUUID(ctx context.Context, uuid string) error
	UpdateOrganization(ctx context.Context, uuid string, organization *domain.Organization) (*domain.Organization, error)
	GetOrganizations(ctx context.Context) ([]*domain.Organization, error)
}

// OrganizationsAPIService is a service that implements the logic for the OrganizationsAPIServicer
// This service should implement the business logic for every endpoint for the OrganizationsAPI API.
// Include any external packages or services that will be required by this service.
type OrganizationsAPIService struct {
	processor OrganizationsProcessor
	logger *slog.Logger
}


// NewOrganizationsAPIService creates a default api service
func NewOrganizationsAPIService(processor OrganizationsProcessor, log * slog.Logger) *OrganizationsAPIService {
	return &OrganizationsAPIService{
		processor: processor,
		logger: log,
	}
}

// Organizations - get all organizations
func (s *OrganizationsAPIService) Organizations(ctx context.Context) (ImplResponse, error) {

	organizations, err := s.processor.GetOrganizations(ctx)

	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	openApiOrganizations := domainOrganizationsToOpenAPI(organizations)
	if len(openApiOrganizations) == 0 {
		return Response(http.StatusNoContent, nil), nil
	}

	return Response(http.StatusOK, openApiOrganizations), nil

}

// CreateOrganization - create new organization
func (s *OrganizationsAPIService) CreateOrganization(ctx context.Context, organization Organization) (ImplResponse, error) {

	result, err := s.processor.CreateOrganization(ctx, &domain.Organization{
		Uuid: organization.Uuid,
		Name: organization.Name,
	})
	if err != nil {
		return Response(http.StatusBadRequest, JsonError.wrapJson(http.StatusBadRequest, err.Error(), organization)), nil
	}
	return Response(201, Organization{
		Uuid: result.Uuid,
		Name: result.Name,
	}), nil

}

// GetOrganizationByUUID - get organization data
func (s *OrganizationsAPIService) GetOrganizationByUUID(ctx context.Context, uuid string) (ImplResponse, error) {

	organization, err := s.processor.GetOrganizationByUUID(ctx, uuid)

	if errors.Is(err, internal.ErrUUIDValidation) {
		return Response(
			http.StatusBadRequest,
			JsonError.wrapJson(http.StatusBadRequest, err.Error(), map[string]string{"uuid":uuid}),
			), nil
	}

	if errors.Is(err, internal.ErrRecordNotFound) {
		return Response(
			http.StatusNotFound,
			JsonError.wrapJson(http.StatusNotFound, err.Error(), map[string]string{"uuid": uuid,}),
			), nil
	}
	if err != nil && !errors.Is(err, sql.ErrNoRows) && !errors.Is(err, internal.ErrUUIDValidation){
		return Response(http.StatusInternalServerError, JsonError.wrapJson(http.StatusInternalServerError, err.Error(),nil)), nil
	}

	return Response(http.StatusOK, organization), nil
}

// DeleteOrganizationByUUID - delete organization
func (s *OrganizationsAPIService) DeleteOrganizationByUUID(ctx context.Context, uuid string) (ImplResponse, error) {

	err := s.processor.DeleteOrganizationByUUID(ctx, uuid)
	if errors.Is(err, internal.ErrUUIDValidation) {
		return Response(
			http.StatusBadRequest,
			JsonError.wrapJson(http.StatusBadRequest, err.Error(), map[string]string{"uuid":uuid}),
			), nil
	}

	if errors.Is(err, internal.ErrRecordNotFound) {
		return Response(
			http.StatusNotFound,
			JsonError.wrapJson(404, err.Error(),
				map[string]string{
			"uuid": uuid,
		})), nil
	}

	if err != nil && !errors.Is(err, internal.ErrRecordNotFound) && !errors.Is(err, internal.ErrUUIDValidation) {
		return Response(http.StatusInternalServerError, JsonError.wrapJson(http.StatusInternalServerError, err.Error(),nil)), nil
	}
	return Response(http.StatusOK, nil), nil

}

// EditOrganizationByUUID - update organization information
func (s *OrganizationsAPIService) EditOrganizationByUUID(ctx context.Context, uuid string, organization Organization) (ImplResponse, error) {

	result, err :=  s.processor.UpdateOrganization(ctx,uuid, &domain.Organization{
		Name: organization.Name,
		Uuid: uuid,
	})
	if errors.Is(err, internal.ErrUUIDValidation) {
		return Response(http.StatusBadRequest, JsonError.wrapJson(http.StatusBadRequest, err.Error(), map[string]string{"uuid": uuid})), nil
	}
	if errors.Is(err, internal.ErrRecordNotFound) {
		return Response(http.StatusNotFound, JsonError.wrapJson(http.StatusNotFound, err.Error(), map[string]string{"uuid": uuid})), nil
	}
	if err != nil && !errors.Is(err, internal.ErrRecordNotFound) && !errors.Is(err, internal.ErrUUIDValidation) {
		return Response(http.StatusInternalServerError, JsonError.wrapJson(http.StatusInternalServerError, err.Error(),nil)), nil
	}

	updatedOrganization := Organization{
		Uuid: result.Uuid,
		Name: result.Name,
	}

	return Response(http.StatusOK, updatedOrganization), nil
}

func domainOrganizationsToOpenAPI(domainOrganizations []*domain.Organization) []Organization {
	organizations := make([]Organization, 0, len(domainOrganizations))
	for _, organization := range domainOrganizations {
		organizations = append(organizations, Organization{
			Uuid: organization.Uuid,
			Name: organization.Name,
		})
	}
	return organizations
}